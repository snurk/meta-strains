SAMPLES = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]

rule all:
    input:
        "matrices/___frequency_results"


rule bwa_map:
    input:
        "../../refs/K12.fasta",
        "/Molly/snurk/strain_sim/4str_exp/sim_reads/sample{sample}/r1.fastq.gz",
        "/Molly/snurk/strain_sim/4str_exp/sim_reads/sample{sample}/r2.fastq.gz"
    output:
        "mapped_reads/{sample}.bam"
    shell:
        "bwa mem -t 16 {input} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"


rule samtools_mpileup:
    input:
        fa="../../refs/K12.fasta",
        bam=expand("sorted_reads/{sample}.bam", sample=SAMPLES)
    output:
        "calls/all.pileup"
    shell:
        "samtools mpileup -B -f {input.fa} {input.bam} > {output}"


rule varscan:
    input:
        "calls/all.pileup"
    output:
        "calls/all.varscan"
    shell:
        "java -jar ~/tools/VarScan.v2.3.9.jar mpileup2snp {input} > {output}"


rule make_matrices:
    input:
        "calls/all.varscan"
    output:
        "matrices/R_all",
        "matrices/X_all"
    shell:
        "python ../../scripts/varscan_to_matrices.py "
        "{input} {output}"


rule filter_matrices:
    input:
        "matrices/R_all",
        "matrices/X_all"
    output:
        "matrices/R_filtered",
        "matrices/X_filtered"
    shell:
        "python ../../scripts/filter_matrices.py "
        "{input} {output}"


rule run_clomial:
    input:
        "matrices/R_filtered",
        "matrices/X_filtered"
    output:
        "matrices/___frequency_results"
    shell:
        "Rscript ../../scripts/run_clomial.R "
        "{input} {output}"

rule report:
    input:
        "matrices/___frequency_results"
    output:
        "report.html"
    run:
        from snakemake.utils import report

        report("""
        This is a report.
        """, output[0],
        metadata="Author: Akseshina Rita")
