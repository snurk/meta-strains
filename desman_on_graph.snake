SAMPLES = ["sample"+str(i) for i in range(1,12)]
DIR_WITH_SAMPLES = "/Nancy/makseshina/raw_data/3ecoli_1Mbp/"
NAME_OF_LEFT_READ = "r1.fastq"
NAME_OF_RIGHT_READ = "r2.fastq"

ASSEMBLER_DIR = "~/tools/algorithmic-biology/assembler/bin"

PATH_TO_SCRIPTS = "~/meta-strains/scripts/scripts_for_desman"
CONTIGS_MIN_LEN = 10000

NUM_SNVs = 3000

DESMAN_DIR = "/home/makseshina/tools/DESMAN"

GENOMES_RANGE = [3]
SEEDS = [0]

SELECTED_G = 3
SELECTED_SEED = 0

left_reads  = expand(DIR_WITH_SAMPLES+"{sample}/"+NAME_OF_LEFT_READ,  sample=SAMPLES)
right_reads = expand(DIR_WITH_SAMPLES+"{sample}/"+NAME_OF_RIGHT_READ, sample=SAMPLES)


def is_fastq(read_file_name):
    for ext in {".fastq", ".fq", ".fastq.gz", "fq.gz"}:
        if read_file_name.endswith(ext):
            return True
    return False



#_____________________________________________________________________________


rule all:
    input:
        "desman_results/Dev.pdf",
        "desman_results/gene_assignment_etaS_df.csv"


rule spades:
    input:   
        left_reads,
        right_reads
    output:  
        "assembly/contigs.fasta"
    params:  
        left  = " ".join(expand("-1 {r}", r=left_reads)),
        right = " ".join(expand("-2 {r}", r=right_reads)),
        dir = "assembly/", 
        bh = "" if is_fastq(NAME_OF_LEFT_READ) else "--only-assembler"
    threads: 
        64 #THREADS
    log:     
        "logs/spades.log"
    message: 
        "Assembling all samples together with metaSPAdes"
    shell:   
        "{ASSEMBLER_DIR}/spades.py {params.bh} --meta -m 400 -t {threads}"
        " {params.left} {params.right}"
        " --save-gp -o {params.dir} >{log} 2>&1 "


#____GET_STRAIN_FREQUENCIES_FROM_DESMAN______________________________________

rule cp_long_contigs:
    input:
        "assembly/contigs.fasta"
    output:
        "contigs/contigs.fa"
    log:
        "logs/cp_long_contigs.log"
    shell:
        "(python {PATH_TO_SCRIPTS}/cp_long_contigs.py {input} {output} {CONTIGS_MIN_LEN}) 2> {log}"


rule bwa_index:
    input:
        "contigs/contigs.fa"
    output:
        "contigs/contigs.fa.amb",
        "contigs/contigs.fa.ann",
        "contigs/contigs.fa.bwt",
        "contigs/contigs.fa.pac",
        "contigs/contigs.fa.sa"
    log:
        "logs/bwa_index.log"
    shell:
        "(bwa index {input}) 2> {log}"


rule bwa_map:
    input:
        contigs = "contigs/contigs.fa",
        index = lambda wildcards: expand("contigs/contigs.fa.{ext}",
                ext=["amb", "ann", "bwt", "pac", "sa"]),
        R1 = DIR_WITH_SAMPLES + "{sample}/" + NAME_OF_LEFT_READ,
        R2 = DIR_WITH_SAMPLES + "{sample}/" + NAME_OF_RIGHT_READ
    output:
        "mapped_reads/{sample}.bam"
    log:
        "logs/bwa_map/{sample}.log"
    shell:
        "(bwa mem -t 16 {input.contigs} {input.R1} {input.R2}" 
        " | samtools view -bS - > {output}) 2> {log}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    log:
        "logs/samtools_sort/{sample}.log"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output} 2> {log}"


rule samtools_mpileup:
    input:
        fa = "contigs/contigs.fa",
        bam = expand("sorted_reads/{sample}.bam", sample=SAMPLES)
    output:
        "calls/all.pileup"
    log:
        "logs/samtools_mpileup.log"
    shell:
        "samtools mpileup -A -B -f {input.fa} {input.bam} > {output} 2> {log}"


rule varscan:
    input:
        "calls/all.pileup"
    output:
        "calls/all.varscan"
    log:
        "logs/varscan.log"
    shell:
        "java -jar /home/makseshina/tools/VarScan.v2.3.9.jar mpileup2snp {input} "
        "--min-coverage	10 --min-reads2 5 --min-var-freq 0.02 > {output} 2> {log}"


rule select_sites:
    input:
        "calls/all.varscan"
    output:
        "calls/selected_sites.tsv"
    log:
        "logs/select_sites.log"
    shell:
        "python {PATH_TO_SCRIPTS}/filter_SNVs.py "
        "{input} {output} {NUM_SNVs} 2> {log}"


rule bam_readcount:
    input:
        sites_list = "calls/selected_sites.tsv",
        fasta = "contigs/contigs.fa",
        bam_file = "sorted_reads/{sample}.bam"
    output:
        counts = "counts/{sample}.cnt"
    log:
        "logs/bam_readcount/{sample}.log"
    shell:
        "samtools index {input.bam_file} {input.bam_file}.bai; "
        "bam-readcount -l {input.sites_list} -f {input.fasta} {input.bam_file} 2> {log} > {output}"


rule extract_counts:
    input:
        all_counts = lambda wildcards: expand("counts/{sample}.cnt", \
                                              sample=SAMPLES)
    output:
        "desman_input/freqs.csv"
    params:
        input_dir = "counts"
    log:
        "logs/extract_counts.log"
    shell:
        "python {PATH_TO_SCRIPTS}/extract_counts.py "
        "{params.input_dir} {output} 2> {log}"


rule desman_variant_filter:
    input:
        "desman_input/freqs.csv"
    output:
        expand("desman_input/filtered_{output_file_type}",
                output_file_type = ["sel_var.csv", "p_df.csv", "q_df.csv", "r_df.csv", "tran_df.csv", "log.txt"])
    shell:
        "python {DESMAN_DIR}/desman/Variant_Filter.py --output_stub desman_input/filtered_ {input}"


rule run_desman:
    input:
        sel_var = "desman_input/freqs.csv",
        #tran_df = "desman_input/filtered_tran_df.csv"
    output:
        desman_results = expand("desman_results/{{g}}_{{r}}/{file_type}",
                                file_type = ["log_file.txt", "fit.txt", "Gamma_star.csv", "Eta_star.csv"])
        #gamma_star = "desman_results/{g}_{r}/Gamma_star.csv".format(g=SELECTED_G, r=SELECTED_SEED),
        #eta_star = "desman_results/{g}_{r}/Eta_star.csv".format(g=SELECTED_G, r=SELECTED_SEED)
    log:
        "logs/desman_results/{g}_{r}.log"
    params:
        desman_python2_env = "desman_2"
    run:
        output_dir = os.path.dirname(output.desman_results[0])
	shell("set +u; source activate {params.desman_python2_env}; set -u;"
        " desman {input.sel_var} -o {output_dir} -i 100 -g {wildcards.g} -s {wildcards.r} > {log}")


rule run_all_desman:
    input: lambda wildcards: expand("desman_results/{g}_{r}/fit.txt", \
            g = GENOMES_RANGE, \
            r = SEEDS)
    output: 
        "desman_results/Dev.csv"
    shell:
        "cat <(echo 'H,G,LP,Dev') <(cat {input} | cut -d',' -f2-) > {output}"


rule plot_dev:
    input: 
        "desman_results/Dev.csv"
    output: 
        "desman_results/Dev.pdf"
    shell:
        "{DESMAN_DIR}/scripts/PlotDev.R -l {input} -o {output}"


#____ASSIGN_EDGES_TO_DIFFERENT_STRAINS_BY_DESMAN_________________________________________

rule count_edges_kmer_cov:
    input:
        # TODO: correct
        "assembly/contigs.fasta"
    output:
        "desman_input/edge_profiles.txt"
    log:
        "logs/count_edges_kmer_cov.log"
    shell:
        "~/tools/algorithmic-biology_sydney/assembler/build/release/bin/strain_mix_from_graph "
        " -g assembly/K55/saves/00_before_repeat_resolution/graph_pack -d input_dataset_2.yaml -p {output} -t 8"


rule count_edges_read_cov:
    input:
        "desman_input/edge_profiles.txt"
    output:
        "desman_input/edge_profiles.read_cov.txt"
    shell:
        "python ~/meta-strains/scripts/to_read_cov.py {input} {output}"


rule make_mean_sd_df:
    input:
        "desman_input/freqs.csv"
    output:
        "desman_input/mean_sd_df.csv"
    shell:
        "python ~/meta-strains/scripts/make_mean_sd_df.py {input} {output}"


rule desman_gene_assign:
    input:
        mean_sd_df = "desman_input/mean_sd_df.csv",
        gamma_star = "desman_results/{g}_{r}/Gamma_star.csv".format(g=SELECTED_G, r=SELECTED_SEED),
        edge_profiles = "desman_input/edge_profiles.read_cov.txt",
        eta_star = "desman_results/{g}_{r}/Eta_star.csv".format(g=SELECTED_G, r=SELECTED_SEED),
        snv_freqs = "desman_input/freqs.csv"
    output:
        "desman_results/gene_assignment_etaS_df.csv"
    log:
        "logs/desman_gene_assign.log"
    params:
        desman_python2_env = "desman_2"
    shell:
        "set +u; source activate {params.desman_python2_env}; set -u;"
        " python {DESMAN_DIR}/desman/GeneAssign.py"
        " {input.mean_sd_df} {input.gamma_star} {input.edge_profiles} {input.eta_star} -v {input.snv_freqs}"
        " -o desman_results/gene_assignment_ --assign_tau > {log}"
